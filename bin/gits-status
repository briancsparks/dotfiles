#!/bin/bash -e

do_clean_branch() {
  pushd . > /dev/null

  DIR="$1"

  cd $DIR
  local mod=$(git status --short | wc -l | tr -d ' ')
  local new=$(git ls-files -o --exclude-standard | wc -l | tr -d ' ')
  local branch=$(git status | egrep -i 'on branch .*$' | cut -d' ' -f3-)

  if [[ -n $branch ]]; then
    if [[ $new == 0 && $mod == 0 ]]; then
      printf -- "------------------------- clean ---- %s %-14s %s\n"  $(hostname)  $branch  $DIR
      git status | sed -n '/up-to-date/d;/up to date/d;/Your branch is/p'
    fi
  fi

  popd > /dev/null
}

do_changed_branch() {
  pushd . > /dev/null

  DIR="$1"

  cd $DIR
  local mod=$(git status --short | wc -l | tr -d ' ')
  local new=$(git ls-files -o --exclude-standard | wc -l | tr -d ' ')
  local branch=$(git status | egrep -i 'on branch .*$' | cut -d' ' -f3-)

  if [[ -n $branch ]]; then
    if [[ $new != 0 || $mod != 0 ]]; then
      printf -- "------------------------------------ %s %-14s %s\n"  $(hostname)  $branch  $DIR
      git status --short
    fi
  fi

  popd > /dev/null
}

do_clean_no_branch() {
  pushd . > /dev/null

  DIR="$1"

  cd $DIR
  local mod=$(git status --short | wc -l | tr -d ' ')
  local new=$(git ls-files -o --exclude-standard | wc -l | tr -d ' ')
  local branch=$(git status | egrep -i 'on branch .*$' | cut -d' ' -f3-)

  if [[ -z $branch ]]; then
    if [[ $new == 0 && $mod == 0 ]]; then
      printf -- "------------------------- clean ---- %s %-14s %s\n"  $(hostname)  $branch  $DIR
      git status | sed -n '/up-to-date/d;/up to date/d;/Your branch is/p'
    fi
  fi

  popd > /dev/null
}

do_changed_no_branch() {
  pushd . > /dev/null

  DIR="$1"

  cd $DIR
  local mod=$(git status --short | wc -l | tr -d ' ')
  local new=$(git ls-files -o --exclude-standard | wc -l | tr -d ' ')
  local branch=$(git status | egrep -i 'on branch .*$' | cut -d' ' -f3-)

  if [[ -z $branch ]]; then
    if [[ $new != 0 || $mod != 0 ]]; then
      printf -- "------------------------------------ %s %-14s %s\n"  $(hostname)  $branch  $DIR
      git status --short
    fi
  fi

  popd > /dev/null
}

if [[ $1 == bridge47 ]]; then
  eval "$(cli-shezargs $@)"

  echo "$1" "$2"

  [[ $2 == prod ]] && assumed_acct="pub"

  for ip in `aws-assumed-role "${assumed_acct}" ec2 describe-instances --filters "Name=tag:tech,Values=bridge47" | jq -r '.Reservations[].Instances[].PrivateIpAddress'`; do
    echo $ip
    sshix $ip 'gits-status' | egrep --line-buffered -v -i yoshi | egrep -v '^push\.default' || true
  done
fi


target_dir="$1"

if ! [[ -d $target_dir ]]; then
  if [[ $# > 0 ]]; then
    eval "$(cli-shezargs $@)"

    color="$1"
    stack="$2"
    for ip in `amips $color $stack`; do
      echo $ip
      sshix $ip 'gits-status' | egrep --line-buffered -v -i yoshi | egrep -v '^push\.default' || true
    done

    exit 0
  fi

  target_dir="${HOME}/dev"
fi

# If this is here, its not a server
[[ -d $target_dir/botball ]] && target_dir="."

git config --global --get 'user.email' | egrep -i yoshi && git config --global --list

repositories="$(find $target_dir -type d | egrep '\.git$' | egrep -v 'X/\.git$' | egrep -v '/dev/[^/]+X/' | sort)"





# Display changed that are not on a branch
echo "===== no branch ====="
for d in $repositories; do
  dir="$(dirname $(dirname $d/..))"

  do_changed_no_branch $dir
done

# Display clean dirs
for d in $repositories; do
  dir="$(dirname $(dirname $d/..))"

  do_clean_no_branch $dir
done

do_changed_no_branch "$HOME/dotfiles"
do_clean_no_branch "$HOME/dotfiles"

# Display changed that are on a branch
echo "===== on a branch ====="

for d in $repositories; do
  dir="$(dirname $(dirname $d/..))"

  do_changed_branch $dir
done

# Display clean dirs
for d in $repositories; do
  dir="$(dirname $(dirname $d/..))"

  do_clean_branch $dir
done

do_changed_branch "$HOME/dotfiles"
do_clean_branch "$HOME/dotfiles"


