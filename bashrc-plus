#!/usr/bin/env bash

test -f ${HOME}/dotfiles/helpers        && source ${HOME}/dotfiles/helpers
test -f ${HOME}/dev/dotfiles/helpers    && source ${HOME}/dev/dotfiles/helpers

verbose "---------- bashrc-plus start; (PS1: |$PS1|)"

# Exit for non-interactive shells
[ -z "$PS1" ] && return

catprg="cat"
hash vimcat && catprg="vimcat"

test -f ${HOME}/dotfiles/proxy-setup        && source ${HOME}/dotfiles/proxy-setup
test -f ${HOME}/dev/dotfiles/proxy-setup    && source ${HOME}/dev/dotfiles/proxy-setup

# some more ls aliases
alias ll='ls -alFrt'
alias la='ls -A'
alias l='ls -CF'

#alias sed='sed -r'

#alias vim='vim -p'

# A real clear-screen

fingerprint() { ssh-keygen -lf $1 -E md5; }

maccls() { osascript -e 'tell application "System Events" to keystroke "k" using command down'; }

if [ "$TERM_PROGRAM" == "Apple_Terminal" ]; then
  alias cls='maccls'
elif [ "$TERM_PROGRAM" == "iTerm.app" ]; then
  alias cls='maccls'
else
  alias cls='printf "\ec"'
fi

modified()
{
  git ls-files -mo --exclude-standard
}

export NODE_PATH="$(npm root -g)"
export GRADLE_OPTS=-Xmx2048m

# gitignore.io
gi() { curl -sL "https://www.gitignore.io/api/$@" ; }

# cd-ish
alias tohome='test -d /mnt/c/Users && cd /mnt/c/Users && test -d sparksb && cd sparksb'
alias gohome='test -d /mnt/c/Users && cd /mnt/c/Users && test -d sparksb && cd sparksb'

mcd() { mkdir -p $@ && cd $@; }

alias fn='find . -type f | egrep -i '
alias fd='find . -type d | egrep -i '

# We can do better?
hash fnn  && alias fn='fnn'
hash fdd  && alias fd='fdd'

alias h='history'
alias hi='history | egrep -i '
alias vim='vim -p'
alias nvim='nvim -p'
alias tree="tree -I 'node_modules|bower_components|ppds|_tmp|cmake-build|doxygen-build'"
alias treesm="tree -I 'node_modules|bower_components|ppds|_tmp|cmake-build|doxygen-build|build'"

# git
alias wip='git commit -am "WIP"'
alias refactoring='git commit -am "Refactoring"'
alias fixed='git commit -am "Fixed"'
alias gpff='git pull --ff-only'
alias cdr0dns='aws route53 list-resource-record-sets --hosted-zone-id /hostedzone/ZGFBEAK36D73U'

alias _run='underscore run '
alias _extract='underscore extract '
alias _map='underscore map '
alias _reduce='underscore reduce '
alias _reduceRigh='underscore reduceRigh '
alias _reduceRight='underscore reduceRight '
alias _select='underscore select '
alias _find='underscore find '
alias _filter='underscore filter '
alias _reject='underscore reject '
alias _flatten='underscore flatten '
alias _pluck='underscore pluck '
alias _keys='underscore keys '
alias _values='underscore values '
alias _extend='underscore extend '
alias _defaults='underscore defaults '
alias _any='underscore any '
alias _all='underscore all '
alias _template='underscore template '
alias _print='underscore print --color '

# Use ssh "${SSHOPTS[@]}" user@host
export SSHOPTS=(-A -o 'StrictHostKeyChecking no' -o 'UserKnownHostsFile=/dev/null' -o 'LogLevel=quiet')

alias ssh='ssh   -A'
alias sshx='ssh  -A -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null"'
#alias sshix='ssh -A -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null" -o "LogLevel=quiet"'
alias sshxi='ssh -A -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null" -o "LogLevel=quiet"'
alias scpx='scp     -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null"'
#alias scpix='scp    -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null" -o "LogLevel=quiet"'
alias scpxi='scp    -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null" -o "LogLevel=quiet"'

alias gru="git remote update"
alias gpff="git pull --ff-only"

alias valgrind-s='valgrind --suppressions=/Users/sparksb/catch2-valgrind-suppressions.supp'

alias vim-config-files='vim -p $HOME/.profile $HOME/.bashrc $HOME/dotfiles/bashrc-plus $HOME/dotfiles/profile-plus $HOME/dotfiles/proxy-setup $HOME/.bash_profile'
alias vim-setup-files='vim -p $HOME/.aws/config $HOME/.aws/credentials $HOME/.ssh/config'

mgru()
{
  git remote update

  if git branch -a | egrep --quiet dev$; then
    printf "%s\n   %s\n%s\n" "------------" "dev" "------------"
    git checkout dev && git pull --ff-only
  fi

  if git branch -a | egrep --quiet qa$; then
    printf "%s\n   %s\n%s\n" "------------" "qa" "------------"
    git checkout qa && git pull --ff-only
  fi

  if git branch -a | egrep --quiet stg$; then
    printf "%s\n   %s\n%s\n" "------------" "stg" "------------"
    git checkout stg && git pull --ff-only
  fi

  if git branch -a | egrep --quiet prod$; then
    printf "%s\n   %s\n%s\n" "------------" "prod" "------------"
    git checkout prod && git pull --ff-only
  fi

  if git branch -a | egrep --quiet develop$; then
    printf "%s\n   %s\n%s\n" "------------" "develop" "------------"
    git checkout develop && git pull --ff-only
  fi

  if git branch -a | egrep --quiet '/gen3$'; then
    printf "%s\n   %s\n%s\n" "------------" "gen3" "------------"
    git checkout gen3 && git pull --ff-only
  fi

}

__git_changes() {
  if [[ $# == 1 ]]; then
    git diff --name-only HEAD HEAD~${1}
  elif [[ $# == 0 ]]; then
    git diff --name-only HEAD HEAD~1
  elif [[ $# == 2 ]]; then
    git diff --name-only HEAD~${1} HEAD~${2}
  fi
}

__git_modified() {
  git ls-files -m -o --exclude-standard
}

alias gch="__git_changes $@"      # -- what files changed in the last N commits?
alias gw='__git_modified $@'
alias vimw='vim `__git_modified $@`'   # -- vim files that are changed from git's POV
alias brs='git branch | grep -v origin'     # -- Show branches on the local machine

__difftool() {
  git difftool -t meld -y "$@" &> /dev/null
}
alias difftool="__difftool $@"

modified()
{
  git ls-files -mo --exclude-standard
}

gosrc() {
  echo $1 $2
#  test -d "$HOME/dev/$1"              && cd "$HOME/dev/$1"
  if [[ -d "$HOME/dev/$1" ]]; then
    echo   "$HOME/dev/$1"
    cd     "$HOME/dev/$1"
  fi

  test -d "$HOME/dev/dev/$1"      && cd "$HOME/dev/dev/$1"
  test -d "$HOME/dev/b/$1"        && cd "$HOME/dev/b/$1"

  cd $2
}

mutil() {
  dir="$HOME/dev/mario-util"
  test -d "$dir" || dir="$HOME/dev/mario_util"
  test -d "$dir" || dir="$HOME/dev/b/mario-util"
  test -d "$dir" || dir="$HOME/dev/b/mario_util"
  cd "$dir/$1"
}

mprint() {
  dir="$HOME/dev/mario-print-server"
  test -d "$dir" || dir="$HOME/dev/mario_print_server"
  cd "$dir/$1"
}

#mutil()   { cd "$HOME/dev/mario-util/$1"          || cd "$HOME/dev/mario_util/$1"; }
mnet()    { cd "$HOME/dev/mario-netapp-server/$1" || cd "$HOME/dev/mario_netapp_server/$1"; }
mdev()    { cd "$HOME/dev/mario-develop/$1"       || cd "$HOME/dev/mario_develop/$1"; }
mario()   { cd "$HOME/dev/mario/$1"               || cd "$HOME/dev/mario/$1"; }
#mprint()  { cd "$HOME/dev/mario-print-server/$1"  || cd "$HOME/dev/mario_print_server/$1"; }

mclient() {
  if [[ -d $HOME/dev/MobileApps/Library_AsyncDiscovery ]]; then cd "$HOME/dev/MobileApps/Library_AsyncDiscovery/$1"
  elif [[ -d $HOME/dev/mario-client ]]; then                    cd "$HOME/dev/mario-client/$1"
  elif [[ -d $HOME/dev/mario_client ]]; then                    cd "$HOME/dev/mario_client/$1"
  fi
}

jsaws()   { cd "$HOME/dev/js-aws/$1"; }

bcs()     { test -d "$HOME/dev/b" && cd "$HOME/dev/b/$1" ; test -d "$HOME/dev/bcs" && cd "$HOME/dev/bcs/$1" ; }
goe()     { cd "$HOME/dev/e2ec/$1"; }
gdv()     { cd "$HOME/dev/$1"; }

sa()      { test -d "$HOME/dev/serverassist/$1"         && cd "$HOME/dev/serverassist/$1"         || cd "$HOME/dev/b/serverassist/$1"; }
serva()   { test -d "$HOME/dev/server-assist-server/$1" && cd "$HOME/dev/server-assist-server/$1" || cd "$HOME/dev/b/server-assist-server/$1"; }

gora()    { cd "$(bcs-godev bcs ra-ecosystem)"; }
goraqn()  { cd "$(bcs-godev bcs ra-ecosystem/packages/quick-net)"; }
gon()     { cd "$(bcs-godev e2e netlab/netlab-monorepo)"; }
gonn()    { cd "$(bcs-godev e2e netlab/netlab-monorepo/netlab/packages/netlab-server)"; }

showpath() { echo $PATH | tr ':' '\n'; }

function highlight() {
  declare -A fg_color_map
  fg_color_map[black]=30
  fg_color_map[red]=31
  fg_color_map[green]=32
  fg_color_map[yellow]=33
  fg_color_map[blue]=34
  fg_color_map[magenta]=35
  fg_color_map[cyan]=36

  fg_c=$(echo -e "\e[1;${fg_color_map[$1]}m")
  c_rs=$'\e[0m'
  sed -u s"/$2/$fg_c\0$c_rs/g"
}


if ! [[ $OS =~ Windows ]]; then
  source <(npm completion)

  # ----- kubectl --------------------------------------------
  if hash kubectl; then
    source <(kubectl completion bash)

    alias k=kubectl
    complete -F __start_kubectl k

    # export KOPS_CLUSTER_NAME="${KOPS_MWP_CLUSTER_NAME}"
    # export KOPS_STATE_STORE="${KOPS_MWP_STATE_STORE}"

    # Are we configured?
    #if [[ -z $KOPS_CLUSTER_NAME || -z $KOPS_STATE_STORE ]]; then
    #  echo ""
    #  echo "---"

    #  if [[ -z $KOPS_CLUSTER_NAME ]]; then
    #    echo "KOPS_CLUSTER_NAME not set"
    #  fi

    #  if [[ -z $KOPS_STATE_STORE ]]; then
    #    echo "KOPS_STATE_STORE not set"
    #  fi

    #  echo ""
    #  echo 'export KOPS_CLUSTER_NAME="${KOPS_MWP_CLUSTER_NAME}"'
    #  echo 'export KOPS_STATE_STORE="${KOPS_MWP_STATE_STORE}"'
    #  echo ""
    #  echo 'export KOPS_CLUSTER_NAME="${KOPS_MWA_CLUSTER_NAME}"'
    #  echo 'export KOPS_STATE_STORE="${KOPS_MWA_STATE_STORE}"'
    #  echo ""
    #fi

    export KOPS_STATE_STORE=s3://serverassist-net-state-store
    export KOPS_CLUSTER_NAME=quack.netlabzero.net


    echo 'export KOPS_STATE_STORE="s3://serverassist-net-state-store"'
    echo 'export KOPS_CLUSTER_NAME="amin.mobiledevassist.net"'
    echo 'export KOPS_STATE_STORE="s3://mtest1-mobiledevprint-net-state-store"'
    echo 'export KOPS_CLUSTER_NAME="mtest1.mobiledevprint.net"'
    echo ""
    echo "KOPS_STATE_STORE=$KOPS_STATE_STORE"
    echo "KOPS_CLUSTER_NAME=$KOPS_CLUSTER_NAME"
    echo ""
    kubectl config get-contexts
  fi
fi

# fzf completion
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

test -f ${HOME}/dotfiles/setprompt      && . ${HOME}/dotfiles/setprompt
test -f ${HOME}/dev/dotfiles/setprompt  && . ${HOME}/dev/dotfiles/setprompt

#test -f $HOME/dotfiles/messages/login.sh && $catprg $HOME/dotfiles/messages/login.sh

verbose "---------- bashrc-plus end"

true

# vim: ft=sh:
