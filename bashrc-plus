#!/usr/bin/env bash

test -f ${HOME}/dotfiles/helpers        && source ${HOME}/dotfiles/helpers
test -f ${HOME}/dev/dotfiles/helpers    && source ${HOME}/dev/dotfiles/helpers

verbose "---------- bashrc-plus start"

test -f ${HOME}/dotfiles/proxy-setup        && source ${HOME}/dotfiles/proxy-setup
test -f ${HOME}/dev/dotfiles/proxy-setup    && source ${HOME}/dev/dotfiles/proxy-setup

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

#alias sed='sed -r'

#alias vim='vim -p'

# A real clear-screen

maccls() { osascript -e 'tell application "System Events" to keystroke "k" using command down'; }

if [ "$TERM_PROGRAM" == "Apple_Terminal" ]; then
  alias cls='maccls'
elif [ "$TERM_PROGRAM" == "iTerm.app" ]; then
  alias cls='maccls'
else
  alias cls='printf "\ec"'
fi

modified()
{
  git ls-files -mo --exclude-standard
}

export NODE_PATH="$(npm root -g)"

alias fn='find . -type f | egrep -i '
alias fd='find . -type d | egrep -i '

# We can do better?
hash fnn  && alias fn='fnn'
hash fdd  && alias fd='fdd'

alias vim='vim -p'
alias tree="tree -I 'node_modules|bower_components|ppds|_tmp|cmake-build'"
alias wip='git commit -am "WIP"'
alias refactoring='git commit -am "Refactoring"'
alias fixed='git commit -am "Fixed"'
alias gpff='git pull --ff-only'

alias _run='underscore run '
alias _extract='underscore extract '
alias _map='underscore map '
alias _reduce='underscore reduce '
alias _reduceRigh='underscore reduceRigh '
alias _reduceRight='underscore reduceRight '
alias _select='underscore select '
alias _find='underscore find '
alias _filter='underscore filter '
alias _reject='underscore reject '
alias _flatten='underscore flatten '
alias _pluck='underscore pluck '
alias _keys='underscore keys '
alias _values='underscore values '
alias _extend='underscore extend '
alias _defaults='underscore defaults '
alias _any='underscore any '
alias _all='underscore all '
alias _template='underscore template '
alias _print='underscore print --color '

alias ssh='ssh   -A'
alias sshx='ssh  -A -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null"'
alias sshix='ssh -A -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null" -o "LogLevel=quiet"'
alias sshxi='ssh -A -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null" -o "LogLevel=quiet"'
alias scpx='scp     -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null"'
alias scpix='scp    -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null" -o "LogLevel=quiet"'
alias scpxi='scp    -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null" -o "LogLevel=quiet"'

alias gru="git remote update"
alias gpff="git pull --ff-only"

mgru()
{
  git remote update

  if git branch -a | egrep --quiet dev$; then
    printf "%s\n   %s\n%s\n" "------------" "dev" "------------"
    git checkout dev && git pull --ff-only
  fi

  if git branch -a | egrep --quiet qa$; then
    printf "%s\n   %s\n%s\n" "------------" "qa" "------------"
    git checkout qa && git pull --ff-only
  fi

  if git branch -a | egrep --quiet stg$; then
    printf "%s\n   %s\n%s\n" "------------" "stg" "------------"
    git checkout stg && git pull --ff-only
  fi

  if git branch -a | egrep --quiet prod$; then
    printf "%s\n   %s\n%s\n" "------------" "prod" "------------"
    git checkout prod && git pull --ff-only
  fi

  if git branch -a | egrep --quiet develop$; then
    printf "%s\n   %s\n%s\n" "------------" "develop" "------------"
    git checkout develop && git pull --ff-only
  fi

}

__git_changes() {
  if [[ $# == 1 ]]; then
    git diff --name-only HEAD HEAD~${1}
  elif [[ $# == 0 ]]; then
    git diff --name-only HEAD HEAD~1
  elif [[ $# == 2 ]]; then
    git diff --name-only HEAD~${1} HEAD~${2}
  fi
}

__git_modified() {
  git ls-files -m -o --exclude-standard
}

alias gch="__git_changes $@"      # -- what files changed in the last N commits?
alias gw='__git_modified $@'
alias vimw='vim `__git_modified $@`'   # -- vim files that are changed from git's POV
alias brs='git branch | grep -v origin'     # -- Show branches on the local machine

__difftool() {
  git difftool -t meld -y "$@" &> /dev/null
}
alias difftool="__difftool $@"

modified()
{
  git ls-files -mo --exclude-standard
}

gosrc() {
  echo $1 $2
#  test -d "$HOME/dev/$1"              && cd "$HOME/dev/$1"
  if [[ -d "$HOME/dev/$1" ]]; then
    echo   "$HOME/dev/$1"
    cd     "$HOME/dev/$1"
  fi

  test -d "$HOME/dev/dev/$1"          && cd "$HOME/dev/dev/$1"
  test -d "$HOME/dev/briancsparks/$1" && cd "$HOME/dev/briancsparks/$1"

  cd $2
}

mutil()   { cd "$HOME/dev/mario-util/$1"          || cd "$HOME/dev/mario_util/$1"; }
mnet()    { cd "$HOME/dev/mario-netapp-server/$1" || cd "$HOME/dev/mario_netapp_server/$1"; }
mdev()    { cd "$HOME/dev/mario-develop/$1"       || cd "$HOME/dev/mario_develop/$1"; }
mario()   { cd "$HOME/dev/mario/$1"               || cd "$HOME/dev/mario/$1"; }
mprint()  { cd "$HOME/dev/mario-print-server/$1"  || cd "$HOME/dev/mario_print_server/$1"; }
mclient() { cd "$HOME/dev/mario-client/$1"        || cd "$HOME/dev/mario_client/$1"; }

jsaws()   { cd "$HOME/dev/js-aws/$1"; }

bcs()     { cd "$HOME/dev/briancsparks/$1"; }

test -f ${HOME}/dotfiles/setprompt      && . ${HOME}/dotfiles/setprompt
test -f ${HOME}/dev/dotfiles/setprompt  && . ${HOME}/dev/dotfiles/setprompt

verbose "---------- bashrc-plus end"

true

