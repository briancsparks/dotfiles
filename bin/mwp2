#!/usr/bin/env node

const sg                      = require('sgsg');
const _                       = sg._;
const util                    = require('util');
const child_process           = require('child_process');
const dgram                   = require('dgram');
const net                     = require('net');

const execFile                = util.promisify(child_process.execFile);
const createSocket            = util.promisify(dgram.createSocket);

const ARGV                    = sg.ARGV();
const USER                    = process.env.USER;
const vader                   = 'photosmart c309a series';

const [ cmd, g_asset, g_ip ]  = ARGV.args;

var   lib = {};

async function main() {
  try {

    if (lib[cmd]) {
      return await lib[cmd]();
    }

  } catch(error) {
    console.error(error);
  }

}

lib.rip = async function() {

  const asset     = ARGV.asset || g_asset;
  const ip        = ARGV.ip || g_ip;

  if (!asset) {
    console.error('Error: must provide --asset=');
    throw new Error('EASSET');
  }

  if (!ip) {
    console.error('Error: must provide --ip=');
    throw new Error('ENOIP');
  }


  var   [ upstream, model ] = await Promise.all([getUpstream(), getModelId(ip)]);

  var pcl = await getPcl(upstream, model, asset);

  if (pcl.length < 1500) {
    model = vader;
    pcl   = await getPcl(upstream, model, asset);
  }

  if (pcl.length < 1500) {
    console.log(`!!! ${pcl}`);
    return;
  }

  //console.log(`Got ${pcl.length} bytes`);
  console.log(sg.inspect({asset, model, upstream, size:pcl.length}));

  return await sendBuffer(pcl, ip);
}

const mtu = 8 * 1024;
async function sendBuffer(buffer, ip) {

  var index     = 0;
  var numSent   = 0;

  return new Promise((resolve, reject) => {

    const client = net.createConnection(9100, ip);

    client.on('lookup', function() {
      console.log('onlookup', arguments);
    });

    client.on('connect', function() {
      //console.log('connected');
    });

    client.on('data', function(buffer) {
      console.log('ondata', buffer.length);
    });

    client.on('drain', function() {
      console.log('ondrain', arguments);
    });

    client.on('close', function(hadError) {
      if (hadError) {
        console.log('onclose hadError: ', hadError);
      }
    });

    client.on('end', function() {
      //console.log('ended');
    });

    client.on('error', function(error) {
      console.log('onerror', arguments);
      client.destroy();
      return reject(error);
    });

    const sendSome = function() {

      const chunkSize = Math.min(mtu, buffer.length - index);
      const chunk     = Buffer.alloc(chunkSize, 0);

      buffer.copy(chunk, 0, index, index+chunkSize);

      return client.write(chunk, function() {
        index   += chunkSize;
        numSent += chunkSize;

        //console.log('written '+index, chunk.length);

        if (index < buffer.length) {
          return sendSome();
        }

        console.log(`Sent ${numSent} bytes`);

        client.end();
        return resolve('');

      });
    };
    sendSome();

  });
}

async function getPcl(upstream, model, asset) {

  var  url = `${upstream}/pcl/typeofprint-unknown/${urlSafe(model || vader)}/${assetInUrl(asset)}`;

  const { stdout, stderr } = await execFile('curl', ['-sL', url], {encoding: 'buffer', maxBuffer: 1024 * 1024 * 32});

  if (stderr && stderr.length > 0) {
    console.error('|'+stderr+'|');
  }

  return stdout;
};

function assetInUrl(asset_) {

  const assetParts  = asset_.replace(/:[/][/]/, '/').split('/');
  const proto       = assetParts[0].toLowerCase();
  const asset       = _.rest(assetParts);

  if (proto.startsWith('http'))   { return assetParts.join('/'); }
  if (proto === 's3')             { return ['https/s3.amazonaws.com', ...asset].join('/'); }

  /* otherwise -- assume it is one of the test files */
  return assetInUrl(`s3://net-mobiledevprint-files/coupons/${asset_}`);
}

async function getUpstream() {
  var   url;

  const timestamp = _.now();

  const stack     = ARGV.stack    || process.env.MWP_CURR_STACK || 'hqpub';
  const currFqdn  = ARGV.fqdn     || process.env.MWP_CURR_FQDN;
  const project   = ARGV.project  || 'sap';

  url  = `https://hq.mobilewebprint.net/${project}/api/v12/clientStart`;
  url += `?clientId=${USER}workstation`;
  url += `&sessionId=${USER}workstation-${timestamp}`;
  url += `&rsvr=${stack}`;

  const { stdout, stderr } = await execFile('curl', ['-sL', url]);

  return JSON.parse(stdout).upstream;
}

//  snmpget -v 1 -c public -On ${ip} 1.3.6.1.2.1.25.3.2.1.3.1 | egrep -o 'STRING.*$' | cut -d' ' -f2-
async function getModelId(ip_) {

  const ip        = ip_ || ARGV.ip || g_ip;

  if (!ip) {
    console.error('Error: must provide --ip=');
    throw new Error('ENOIP');
  }

  const { stdout, stderr }  = await execFile('snmpget', ['-v', '1', '-c', 'public', '-On', ip, '1.3.6.1.2.1.25.3.2.1.3.1']);

  const snmpString          = stdout.split('\n')[0];

  const m = /STRING:\s+(.+)$/i.exec(snmpString);

  return urlSafe(m[1]);
}

function urlSafe(str) {
  if (!str)   { return str; }

  return str.replace(/ /g, '+');
}

main();

/* vim: set ft=javascript: */

